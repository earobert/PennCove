{
    "collab_server" : "",
    "contents" : "#Goal: This code should\n# Input Summer2016 FoodXTemp data for parameterizations\n# - Input thread counts and thread strength\n# - Input shell and tissue growth \n# - Input survival\n# Fit curve, starting with the 3 parameter curve\n# 5. Perform AIC on best curves (i.e. pooling both temps or not) \n#                OR on which equations to use - it's pretty clear, the 3 param one minimizes param estimation and allow for assymetry\n# 6. Output outputs MLE and 95% confidence intervals\n# For the first pass I'm going to only use mean mesocosm thread productinon assume that the random effects of the \n# mesocosm don't matter (i.e. as much variability within the mesocosm as between). \n# I should really test this assumption. \n# Here is a link to how: https://cran.r-project.org/web/packages/RLRsim/RLRsim.pdf\n# and https://stats.stackexchange.com/questions/56150/how-can-i-test-whether-a-random-effect-is-significant\n\n\nrequire(lme4)\nrequire(MASS)\nrequire(car)\nrequire(ggplot2)\nrequire(effects)\nlibrary(multcomp) #For Tukey HSD: https://stats.stackexchange.com/questions/237512/how-to-perform-post-hoc-test-on-lmer-model\nlibrary(lsmeans)\nlibrary(lmerTest)\n\nsetwd(\"~/Documents/School and jobs/UW Biology/Research/Summer 2016/TEMPXFOOD_Roberts_2016/data/thread production\")\ntreatvec_all <- read.csv('FoodXTemp thread_num_all.csv', header = T, stringsAsFactors = F)\nhead(treatvec_all)\n\ntreatvec_10wk <- treatvec_all[treatvec_all$Time=='10 weeks',]\ntreatvec_2wk <- treatvec_all[treatvec_all$Time=='2 weeks',]\ntreatvec <- treatvec_10wk\n\ntreatvec$species <- factor(treatvec$species)\ntreatvec$Mesocosm <- factor(treatvec$Mesocosm)\ntemporary <- factor(treatvec$Food)\ntreatvec$Food <- -as.numeric(temporary)+2\ntreatvec$Temp <- as.numeric(treatvec$Temp)\n\ntrans <- function(untrans) {\n  trans = log(x = untrans+50, base = 10);\n  return(trans)\n}\n\ntransvec <- trans(treatvec$threads.per.mussel)\n\nuntrans <- function(trans) {\n  untrans = 10^trans - 50;\n  return(untrans)\n}\n\n# 5 parameter Arrhenius equation #####\n# x_t <- seq(10,23, by = .5)\n# x_K <- x_t+273\n# x <- 1/(x_t+273)\n# # If I make TL really low and TAL really high, these stop being part of the equation\n# TL <- 273\n# TAL <- 50*10^3\n# TH <- 273+21\n# TAH <- 19*10^4\n# TA <- 2000\n# Arh <- exp(TA/293 - TA/x_K)\n# y <- Arh*1/(1+exp(TAL/x_K - TAL/TL)+exp(TAH/TH - TAH/x_K))\n# plot(1/x,exp(y), type = \"l\")\n# plot(x,y, ylim = c(0,1.5), type = \"l\")\n\n# clean up data:\ntv <- treatvec[!is.na(treatvec$threads.per.mussel),]\n# For tross\nspe <- tv[tv$species == \"M. trossulus\",]\nnorm_fact <- 3.5\npoints(1/(spe$Temp+273), log(spe$threads.per.mussel, base = exp(1))/norm_fact, \n       col = as.factor(spe$Food), ylim = c(0.5,1.5), pch = 20)\n\n# For gallo\nspe <- treatvec[treatvec$species == \"M. galloprovincialis\",]\nnorm_fact <- 3.5\npoints(1/(spe$Temp+273), log(spe$threads.per.mussel, base = exp(1))/norm_fact, \n       col = as.factor(spe$Food), ylim = c(0.5,1.5), pch = 20)\n\n# 3 parameter modified gaussian #### Deutsch et al\n# x_t <- seq(10,23, by = .1)\n# x_K <- x_t+273\n\nTopt <- 18\nomega <- 7\nCTmax <- 22\ny <- rep(-99, length.out = length(x_t))\ni <- 1\nx <- 1/(x_t+273)\nfor(i in 1:length(x_t)){\n  if(x_t[i]< Topt){\n    num <- (x_t[i] - Topt)\n    denom <- (2*omega)\n    y[i] <- exp(-(num/denom)^2)\n  } else {\n    num2 <- x_t[i] - Topt\n    denom2 <- Topt - CTmax\n    y[i] <- 1-(num2/denom2)^2\n  }\n}\nplot(x_t,y, type = \"l\", ylim = c(0,1.5))\n\n# clean up data:\ntv <- treatvec[!is.na(treatvec$threads.per.mussel),]\n# For tross\nspe <- tv[tv$species == \"M. trossulus\",]\nnorm_fact <- 40\npoints(spe$Temp, spe$threads.per.mussel/norm_fact, \n       col = as.factor(spe$Food), ylim = c(0.5,1.5), pch = 20)\n\n# MLE FITS =======\nspe <- tv[tv$species == \"M. trossulus\",]\nhead(spe)\nspe.F <- spe[spe$Food==0,]\nX <- spe.F$Temp\nY <- spe.F$threads.per.mussel\n#points(X,Y)\n\n# MLE2\n\nlibrary(bbmle)\nNLL_Mod_Gauss <- function(norm,Topt, omega, CTmax, XX, YY, sigma, Food.trt){\n    if(XX< Topt){\n      num <- (XX - Topt)\n      denom <- (2*omega)\n      model.predR <- exp(-(num/denom)^2)\n    } else {\n      num2 <- XX - Topt\n      denom2 <- Topt - CTmax\n      model.predR <- 1-(num2/denom2)^2\n    }\n  ndata <- length(XX)\n  NLL <- -sum(dnorm(x=YY/norm, \n                    mean=model.predR,sd=sigma,log=TRUE))\n  return(NLL)\n}\nmleout <- mle2(minuslogl=NLL_Mod_Gauss,data=list(norm, Topt, omega, CTmax, XX=X, YY=Y),start = list(norm=35, Topt=18, omega=7, CTmax=22, sigma=10),)\n\n(out.tross.LF.threads <- summary(mleout))\n\n# Coefficients:\n#   Estimate Std. Error    z value     Pr(z)    \n# norm  3.3308e+01 2.1889e+00 1.5217e+01 < 2.2e-16 ***\n#   Topt  1.4651e+01 7.6374e-09 1.9183e+09 < 2.2e-16 ***\n#   omega 3.4947e+00 9.8187e-01 3.5593e+00 0.0003719 ***\n#   CTmax 2.2044e+01 5.5515e-01 3.9709e+01 < 2.2e-16 ***\n#   sigma 2.1689e-01 3.3467e-02 6.4808e+00 9.126e-11 ***\n  \nout <- out.tross.LF.threads\nstr(out)\nTopt <- out@coef[\"Topt\",1]\nomega <- out@coef[\"omega\",1]\nCTmax <- out@coef[\"CTmax\",1]\nnorm <- out@coef[\"norm\",1]\n\n#plot(X,Y)\nx_t <- seq(12,21, by = .5)\ny.pred <- rep(-99, length.out = length(x_t))\ni <- 20\nfor(i in 1:length(x_t)){\n  if(x_t[i]< Topt){\n    num <- (x_t[i] - Topt)\n    denom <- (2*omega)\n    y.pred[i] <- exp(-(num/denom)^2)\n  } else {\n    num2 <- x_t[i] - Topt\n    denom2 <- Topt - CTmax\n    y.pred[i] <- 1-(num2/denom2)^2\n  }\n}\nplot(x_t,y.pred*norm, type = \"l\", ylim = c(0,60), col = \"light green\",\n     ylab = \"Thread production\",\n     xlab = \"Temp deg C\")\npoints(X,Y, col = \"light green\", pch = 20)\n\n#==== Same thing for high food tross #######\nspe <- tv[tv$species == \"M. trossulus\",]\nhead(spe)\nspe.F <- spe[spe$Food==1,]\nX <- spe.F$Temp\nY <- spe.F$threads.per.mussel\n#points(X,Y)\n\nmleout <- mle2(minuslogl=NLL_Mod_Gauss,data=list(norm, Topt, omega, CTmax, XX=X, YY=Y),start = list(norm=35, Topt=18, omega=7, CTmax=22, sigma=10),)\n\n(out.tross.HF.threads <- summary(mleout))\n\n# Coefficients:\n#   Estimate Std. Error    z value     Pr(z)    \n# norm  1.0099e+03 1.9435e-03 5.1965e+05 < 2.2e-16 ***\n#   Topt  1.2801e+02 1.2082e-01 1.0595e+03 < 2.2e-16 ***\n#   omega 3.0075e+01 4.4779e-01 6.7163e+01 < 2.2e-16 ***\n#   CTmax 2.2000e+01 4.0842e-17 5.3866e+17 < 2.2e-16 ***\n#   sigma 1.4642e-02 2.4598e-03 5.9527e+00 2.637e-09 ***\n#   ---\n#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n# \n# -2 log L: -101.1647 \n\nout <- out.tross.HF.threads\nstr(out)\nTopt <- out@coef[\"Topt\",1]\nomega <- out@coef[\"omega\",1]\nCTmax <- out@coef[\"CTmax\",1]\nnorm <- out@coef[\"norm\",1]\n\nx_t <- seq(12,21, by = .5)\ny.pred <- rep(-99, length.out = length(x_t))\ni <- 20\nfor(i in 1:length(x_t)){\n  if(x_t[i]< Topt){\n    num <- (x_t[i] - Topt)\n    denom <- (2*omega)\n    y.pred[i] <- exp(-(num/denom)^2)\n  } else {\n    num2 <- x_t[i] - Topt\n    denom2 <- Topt - CTmax\n    y.pred[i] <- 1-(num2/denom2)^2\n  }\n}\npoints(x_t,y.pred*norm, type = \"l\", col = \"dark green\" )\npoints(X,Y, col = \"darkgreen\", pch = 20)\n\n\n",
    "created" : 1525306147581.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "762339288",
    "id" : "59A1DB8C",
    "lastKnownWriteTime" : 1550281038,
    "last_content_update" : 1550281038277,
    "path" : "~/Documents/School and jobs/UW Biology/Research/Penn_Cove_monitoring/SONDE_data/SONDE_data/FoodXTempModelParams201804_copy.R",
    "project_path" : "FoodXTempModelParams201804_copy.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
{
    "collab_server" : "",
    "contents" : "# This creates graphs of model predictions from inputs plus parameters at Penn Cove\n\n# Before running this script, run parts of the scripts from SONDE_graphs.R and FoodXTempModelParams201804 in:\n# setwd(\"~/Documents/School and jobs/UW Biology/Research/Penn_Cove_monitoring/SONDE_data/SONDE_data\")\n# and\n# setwd(\"~/Documents/School and jobs/UW Biology/Research/Summer 2016/TEMPXFOOD_Roberts_2016/data/thread production\")\n\n\n\n# SONDE predictions\n\npar(mfrow = c(1,1))\n\n# Temp response index - dummy functions (Actual functions can be obtained from Fly and Hilbish)\n# 1m: tross\n\nout <- out.tross.HF.threads\n\nTopt <- out@coef[\"Topt\",1]\nomega <- out@coef[\"omega\",1]\nCTmax <- out@coef[\"CTmax\",1]\nnorm <- out@coef[\"norm\",1]\n\nx <- df.all$TempC_1m\ny.pred <- rep(-99, length.out = length(x))\ni <- 20\nfor(i in 1:length(x)){\n  if(x[i]<= Topt){\n    num <- (x[i] - Topt)\n    denom <- (2*omega)\n    y.pred[i] <- exp(-(num/denom)^2)\n  } else {\n    num2 <- x[i] - Topt\n    denom2 <- Topt - CTmax\n    y.pred[i] <- 1-(num2/denom2)^2\n  }\n}\n\nplot(df.all$TIMESTAMP, y.pred*norm, col = \"blue\", pch = \".\", \n     ylab = \"Thread production (#/mussel)\", ylim =  c(0,80), xlab = \"Date\")\n#points(df.all$TIMESTAMP, df.all$TempC_1m+40, pch = \".\", type = \"l\")\n\nout <- out.tross.LF.threads\n\nTopt <- out@coef[\"Topt\",1]\nomega <- out@coef[\"omega\",1]\nCTmax <- out@coef[\"CTmax\",1]\nnorm <- out@coef[\"norm\",1]\n\nx <- df.all$TempC_1m\ny.pred <- rep(-99, length.out = length(x))\ni <- 20\nfor(i in 1:length(x)){\n  if(x[i]<= Topt){\n    num <- (x[i] - Topt)\n    denom <- (2*omega)\n    y.pred[i] <- exp(-(num/denom)^2)\n  } else {\n    num2 <- x[i] - Topt\n    denom2 <- Topt - CTmax\n    y.pred[i] <- 1-(num2/denom2)^2\n  }\n}\n\n#points(df.all$TIMESTAMP, y.pred*norm, pch = \".\", type = \"l\", col = \"light green\")\n\n\n#====Deep Predictions ====#\nx <- df.all$TempC_7m\ny.pred <- rep(-99, length.out = length(x))\ni <- 20\nfor(i in 1:length(x)){\n  if(x[i]<= Topt){\n    num <- (x[i] - Topt)\n    denom <- (2*omega)\n    y.pred[i] <- exp(-(num/denom)^2)\n  } else {\n    num2 <- x[i] - Topt\n    denom2 <- Topt - CTmax\n    y.pred[i] <- 1-(num2/denom2)^2\n  }\n}\n\npoints(df.all$TIMESTAMP, y.pred*norm, col = \"darkorchid4\", pch = \".\", \n     ylab = \"Thread production (#/mussel)\", ylim =  c(0,80), xlab = \"Date\")\n#points(df.all$TIMESTAMP, df.all$TempC_1m+40, pch = \".\", type = \"l\")\n\nout <- out.tross.LF.threads\n\nTopt <- out@coef[\"Topt\",1]\nomega <- out@coef[\"omega\",1]\nCTmax <- out@coef[\"CTmax\",1]\nnorm <- out@coef[\"norm\",1]\n\nx <- df.all$TempC_7m\ny.pred <- rep(-99, length.out = length(x))\ni <- 20\nfor(i in 1:length(x)){\n  if(x[i]<= Topt){\n    num <- (x[i] - Topt)\n    denom <- (2*omega)\n    y.pred[i] <- exp(-(num/denom)^2)\n  } else {\n    num2 <- x[i] - Topt\n    denom2 <- Topt - CTmax\n    y.pred[i] <- 1-(num2/denom2)^2\n  }\n}\n\n#points(df.all$TIMESTAMP, y.pred*norm, pch = \".\", type = \"l\", col = \"darkorchid1\")\n\n\n#Food#=====\n#points(df.all$TIMESTAMP, log(df.all$Chlug_1m+10), pch = \".\", type = \"l\")\n\n#==============\nrequire(lme4)\nrequire(MASS)\nrequire(car)\nrequire(ggplot2)\nlibrary(tidyr) # For command spread convert long form into wide form\nrequire(stats)\nlibrary(effects)\nlibrary(plyr)\n#library(psych)\nlibrary(gridExtra)\nlibrary(cowplot)\n\n#====threads=======\nsetwd(\"~/Documents/School and jobs/UW Biology/Research/Penn_Cove_monitoring/Mussel Hotels/data\")\n# check data entry for threads... especially 8/7/17\nthreads <- read.csv(\"thread_counts.csv\", stringsAsFactors = F, header = TRUE)\nhead(threads)\nunique(threads$Date_collected)\n#threads[threads$Date_collected == \"\"] <- NA # get rid of empty rows\n\nthreads$depth <- factor(threads$depth)\nstr(threads)\n\nthreads <- threads[!is.na(threads$num_threads_per_mussel),]\n\n\nlength(threads$species)\nlength(threads[c(\"num_threads_per_mussel\")])\n\nmesocosm <- aggregate(x = threads$num_threads_per_mussel,\n                      by = list(threads$Date_collected,threads$species,threads$depth,threads$tile_num), \n                      data =  threads, FUN = mean, na.rm = TRUE) \n\nstr(mesocosm) \nunique(mesocosm$Group.1)\nnames(mesocosm) <- c(\"date\",\"species\",\"depth\",\"tile_num\",\"x\")\nlibrary(plyr)\n\nmesocosm$date <- as.factor(mesocosm$date)\nmesocosm$species <- as.factor(mesocosm$species)\nmesocosm$depth <- as.factor(mesocosm$depth)\n\nstr(mesocosm)\n\ncdata <- ddply(mesocosm, c(\"date\", \"species\", \"depth\"), summarise,\n               N    = length(x),\n               mean = mean(x),\n               sd   = sd(x),\n               se   = sd / sqrt(N)\n)\ncdata\nstr(cdata)\n\ndeep <- cdata[cdata$depth == \"D\",]\nshallow <- cdata[cdata$depth == \"S\",]\ngallo <- cdata[cdata$species == \"G\",]\ntross <- cdata[cdata$species == \"T\",]\n\nstr(deep)\nstr(shallow)\nstr(gallo)\n\n# par(mfrow= c(2,1))\n# par(oma = c(4,1,1,1))\n# par(mar = c(0, 4, 0, 0)+1)\n# spe <- gallo\n# plot(x=as.Date(spe$date, \"%m/%d/%y\"),y=spe$mean, \n#      col = as.factor(spe$depth),\n#      xlab = \"date\",\n#      ylab = \"thread_prod\",\n#      ylim = c(20,85),\n#      type = \"p\",\n#      pch = 19)\n# x0<-as.Date(spe$date, \"%m/%d/%y\")\n# y0<-spe$mean-spe$se\n# y1<-spe$mean+spe$se\n# arrows(x0,y0,x0,y1,code=0,angle=90)\n# \n# legend(x = 'topleft',col = c(\"red\",\"black\"), \n#        pch = 19, legend = c(\"Shallow\",\"Deep\"),bty = \"n\")\n\nspe <- tross\nspe.depth <- spe[spe$depth == \"S\",]\nspe <- spe.depth\nd <- as.Date(spe$date, \"%m/%d/%y\")\nd.t <- as.POSIXct(d)\n# plot(x=as.POSIXct(d),y=spe$mean, \n#      col = as.factor(spe$depth),\n#      xlab = \"date\",\n#      ylab = \"thread_prod\",\n#      ylim = c(20,85),\n#      type = \"p\",\n#      pch = 19)\npoints(x=d.t,y=spe$mean, pch = 19, col = \"blue\")\n\nx0<-d.t\ny0<-spe$mean-spe$se\ny1<-spe$mean+spe$se\narrows(x0,y0,x0,y1,code=0,angle=90)\n\nspe <- tross\nspe.depth <- spe[spe$depth == \"D\",]\nspe <- spe.depth\nd <- as.Date(spe$date, \"%m/%d/%y\")\nd.t <- as.POSIXct(d)\n# plot(x=as.POSIXct(d),y=spe$mean, \n#      col = as.factor(spe$depth),\n#      xlab = \"date\",\n#      ylab = \"thread_prod\",\n#      ylim = c(20,85),\n#      type = \"p\",\n#      pch = 19)\npoints(x=d.t,y=spe$mean, pch = 19, col = \"purple\")\n\nx0<-d.t\ny0<-spe$mean-spe$se\ny1<-spe$mean+spe$se\narrows(x0,y0,x0,y1,code=0,angle=90)\n\n# Now check correlations\n#match()\n#plot(spe$mean)\n\n# library(\"zoo\")\n# library(\"xts\")\n# tmp_file <- \"http://s3.amazonaws.com/assets.datacamp.com/production/course_1127/datasets/tmp_file.csv\"\n# # Create dat by reading tmp_file\n# dat <- read.csv(tmp_file)\n# \n# # Convert dat into xts\n# xts(dat, order.by = as.Date(rownames(dat), \"%m/%d/%Y\"))\n# \n# # Read tmp_file using read.zoo\n# dat_zoo <- read.zoo(tmp_file, index.column = 0, sep = \",\", format = \"%m/%d/%Y\")\n# \n# # Convert dat_zoo to xts\n# dat_xts <- as.xts(dat_zoo)\n# \n# # Convert sunspots to xts using as.xts().\n# sunspots_xts <- as.xts(sunspots)\n# \n# # Get the temporary file name\n# tmp <- tempfile()\n# \n# # Write the xts object using zoo to tmp \n# write.zoo(sunspots_xts, sep = \",\", file = tmp)\n# \n# # Read the tmp file. FUN = as.yearmon converts strings such as Jan 1749 into a proper time class\n# sun <- read.zoo(tmp, sep = \",\", FUN = as.yearmon)\n# \n# # Convert sun into xts. Save this as sun_xts\n# sun_xts <- as.xts(sun)\n# \n# # Create lastweek using the last 1 week of temps\n# lastweek <- last(temps, \"1 week\")\n# \n# # Print the last 2 observations in lastweek\n# last(lastweek, 2)\n# \n# # Extract all but the first two days of lastweek\n# first(lastweek, \"-2 days\")",
    "created" : 1525306159400.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3084431774",
    "id" : "5D782FB9",
    "lastKnownWriteTime" : 1550281068,
    "last_content_update" : 1550281068533,
    "path" : "~/Documents/School and jobs/UW Biology/Research/Penn_Cove_monitoring/SONDE_data/SONDE_data/Predictions_copy.R",
    "project_path" : "Predictions_copy.R",
    "properties" : {
        "docOutlineVisible" : "1",
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
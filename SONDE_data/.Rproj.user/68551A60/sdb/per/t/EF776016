{
    "contents" : "#Lecture 7: data manipulation in practive\nsetwd(\"~/Documents/Software/R/Intro_to_R/Data_files\")\n\n#======Review\nsystem.time(unique(temp))\nmerge(station1, station2, by.x=\"time1\",by.y=\"time2\")\nmatch(1:10, c(1,3,5,9))\nas.Date('9/22/1983', format='%m/%d/%y')\njulian(as.Date(), origin=as.Date())\n?as.POSIXlt\ndifftime(as.Date(\"...\"),as.Date(\"...\"))\nlibrary(package)\nrequire(package)\nvignette(\"googleVis\")\n\n#=======Help\nhelp.search(\"logarithm\")\napropos(\"log\")\nhelp(\"log\")\n?log\n\n#=======Data types\nspeciesCode <- read.csv(\"speciesCode.csv\") \nspeciesData <- read.csv(\"speciesData.csv\") \ntripData <- read.csv(\"tripData.csv\")\n\nhead(speciesCode)\nhead(speciesData)\nhead(tripData)\n\ntripData$Date <- as.Date(tripData$Date)\nhead(tripData)\n(min.date <- min(tripData$Date))\n(max.date <- max(tripData$Date))\ndifftime(max.date, min.date)\n\ntripData <- tripData[order(tripData$Date),]\ndiff(c(1,2,4,5,6))\nmax(diff(tripData$Date)) #165\ntripDataGap <- which(diff(tripData$Date)==max(diff(tripData$Date))) #248 vs 259\ntripData$Date[258]\ntripData$Date[259]\ntripData$Date[255:305]\ntripData[(tripDataGap-3):(tripDataGap+3),\"Date\"]\n\nplot(x=tripData$Date, y=tripData$TotalMinutes/60, \n     type=\"h\", ylim=c(0,5), xaxs=\"i\", yaxs=\"i\", \n     xlab=\"Trip date\", ylab=\"Trip length (hr)\")\n\nhead(speciesCode)\nhead(speciesData)\n\n#What species was caught most? \n#Using species data...\n#Summarize counts in terms of species code using the table function\nspeciesCounts <- table(speciesData$SpeciesCode) \n#Find the species that had the max count\ntemp <- speciesCounts[which.max(speciesCounts)]\nmaxCode <- as.numeric(names(speciesCounts[which.max(speciesCounts)])) \n#Using species code\nmax.spp <- speciesCode[speciesCode$SpeciesCode == maxCode,] \n\n\n#=======Creating species-specific datasets using merge and grep\ngrep(\"a\", c(\"a\",\"b\",\"c\",\"a\")) #Returns the index where a was found\n#Find what species code belongs to bocaccio (2 steps)\nbocaccioRows <- grep(\"Bocaccio\",speciesCode$Common) \nspeciesCode[bocaccioRows,] #here it is along with a few things... \n#Subset speciesData to observations of bocaccio (using the code)\nbocaccioCode <- speciesCode[bocaccioRows, \"SpeciesCode\"]\nbocaccioData <- subset(speciesData,SpeciesCode==bocaccioCode) \nhead(bocaccioData)\nhead(tripData)\n#Merge\n#x[,-1] removes the 1st column\n#by.x and by.y specify what columns should match... \nbocTrip <- merge(bocaccioData,tripData[,-1],by.x=\"TripNum\",by.y=\"SimplifiedTripNum\")\nhead(bocTrip, n=4)\n\n#==============In class exercise 2\n#==Q1\n#Subset speciesData to include all rockfish species \n#(Sebastes) using species code\n#speciesCode <- na.omit(speciesCode)\nhead(speciesData)\n#speciesData <- na.omit(speciesData[,-8])\n#Tried getting rid of NAs - thought the NAs were messing me up, but that was not the issue\n\nrockfishRowIndex <- grep(\"Sebastes\", speciesCode$Scientific)\nrockfishCodeRows <- speciesCode[rockfishRowIndex,]\nhead(rockfishCodeRows,n=1)\nrockfishCode <- rockfishCodeRows[,\"SpeciesCode\"]\nsort(unique(rockfishCode))\nnames(speciesData)\n###Use %in% for a vector(rather than value/char) to be found withing a larger vector\n#%in% returns a logical vector indicating if there is a match or not for its left operand (1st argument is set, and 2nd is subset)\n#match also returns a vector of positions of the first matches of its first argument in its second (1st argument is subset, 2nd argument is set)\nx <- speciesData[speciesData$SpeciesCode %in% rockfishCode, \"SpeciesCode\"]\nhead(x)\nsort(unique(x)) #why?\nrockfishData <- speciesData[speciesData$SpeciesCode %in% rockfishCode,]\nhead(rockfishData)\n\n#==Q2\n#Provide a table of the fates of rockfish by species code\n?table\n#table(x,...) where \"...\" is one or more objects that can be interpreted as factors\n#table generally counts the number of x, subdivided by x$something\ntable(rockfishData$SpeciesCode,rockfishData$Fate)\n#Fate is a factor, convert to text to get rid of blank factor\ntable(rockfishData$SpeciesCode, as.character(rockfishData$Fate))\n\n\n#==Q3\n#calculate the minimum and maximum length recorded for each rockfish species\nnames(rockfishData)\n#needs na.rm=T because of the NAs\ntapply(rockfishData$Length, rockfishData$SpeciesCode, min)\ntapply(rockfishData$Length, rockfishData$SpeciesCode, \n       min, na.rm=T)\ntapply(rockfishData$Length, rockfishData$SpeciesCode, max, \n       na.rm=T)\n\n#==Q4\nhead(rockfishData)\nrockfishDataSpecies<- merge(rockfishData, speciesCode, \n      by.x=\"SpeciesCode\", by.y=\"SpeciesCode\")\n#note, specify column within the dataset for by.x and by.y, not ...$...\n#note, include entire dataset for merging\nhead(rockfishDataSpecies)\ntablefate <- table(rockfishDataSpecies$Common,rockfishData$Fate)\nhead(tablefate)\n\n\n#====me struggling...\n#Provide a table of the fates of rockfish by species code\n#You can subset by a single rockfish code like this... \nspeciesData$SpeciesCode==rockfishCode[1]\nspeciesData[speciesData$SpeciesCode==rockfishCode[1],]\n#Try the subset() function since multiple rockfish codes...\n?subset\nsubset(speciesData, SpeciesCode==rockfishCode[1], select = Fate)\n#The subset function will also only work with 1... \nrockfishCode\n?grep #this only searches for the first character in a vector of characters\n#Maybe I'm trying to do too much. Make a table of fates of rockfish BY species code...\n?table\n\n#====Looking at the answer... use merge!!!\nmerge(speciesData$Spe)\n?merge\n\n",
    "created" : 1479868462140.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2174218521",
    "id" : "EF776016",
    "lastKnownWriteTime" : 1476068475,
    "path" : "~/Documents/Software/R/Intro_to_R/Class_work_Intro/7.DataManipulationInPractice.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}
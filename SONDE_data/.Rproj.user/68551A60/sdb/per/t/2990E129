{
    "contents" : "#6. Data manipulation\n\n#-------------Review\nunique(plates)\nis.numeric(plates)\ncut(ages, breaks=c(0,18,65,Inf),\n    labels=c(\"Kid\",\"Adult\",\"Senior\")) \nletters\nmonth.name\nc(Inf, NA, NaN, NULL) #undefined characters\napply(X=m, MARGIN=1, FUN=quantile, c(0.05,0.5,0.95))\nrowMeans(data)\ntapply(X=lengths, INDEX=genders, FUN=mean) #apply a function to groups (INDEX) of data within a vector\nsort(x)\norder(x)\n\n#-------------Speed testing\ntemp<- sample(1:100, size=10000000, replace = T)\nhead(temp)\nsystem.time(unique(temp))#elapsed .269s\nsystem.time(temp[!duplicated(temp)])#elapsed .393s\nsystem.time(temp[which(!duplicated(temp))])#elapsed 0.466s\nsystem.time(as.numeric(levels(factor(temp))))#elapsed 4.65s\n\n#=============Combining data sources\n#when rbind and cbind are difficult, use merge\n?merge\nmerge(station1, station2, by.x=\"time1\",by.y=\"time2\")\n#merge relies on the following functions:\nintersect(1:10, 7:20) #finds common elements in vectors\nmatch(1:10, c(1,3,5,9)) #matches positions of common elements in vectors\n\n#=============Exercise 1\nx <- 1:10\ny <- c(1,3,5,9)\n?match\nx[x %in% y]#Change match to true or false\nx<-1:100\nsystem.time(y<-sample(x,size=100000000))\n#This acted weird... \n\n#=============How to store and handle dates\nas.Date(\"2013/10/15\")\nas.Date(\"9/22/1983\", format='%m/%d/%Y')\ntoupper(\"sep\")\nas.Date(\"22SEP83\", format='%d%b%y')\nas.Date(\"22sep83\", format='%d%b%y')\n\nweekdays(as.Date(\"2013/10/15\"))#Extract a component\nmonths(as.Date(\"2013/10/15\")) \nquarters(as.Date(\"2013/10/15\")) \njulian(as.Date(\"2013/10/15\"),origin=as.Date(\"2013/01/01\")) #number of days since the start of the year\n?attr\n\n#For POSIXct if the dates are not in the format 1983/9/22 23:20;05, use strptime()\nas.POSIXlt(\"1983-9-22 23:20:05\") \nas.POSIXct(\"1983-9-22 23:20:05\") \naDate <- as.POSIXct(\"1983-9-22 23:20:05\")\n\n#Many functions such as min(), mean, max, can accept objects of date class.\ndifftime(as.Date(\"2013/10/15\"), as.Date(\"2010/06/14\"))\n\neveryday <- seq(from=as.Date(\"2013-01-01\"),\n                to=as.Date(\"2013-12-31\"), by=\"day\") \neveryday\nmonth<-months(everyday)#Find months\nmonth<-factor(month, levels=unique(month),ordered=T)#convert to factors\ntable(month) #Summarizes how many of each month level...\n\n#================Exercise 2\ndate=c(\"1985/12/01\", \"1984/10/22\")\nweekdays(as.Date(date))\nmonths(as.Date(date))\ndifftime(as.Date(date[1]), as.Date(date[2]))\n\n#================Installing and loading packages\n#library(package) forces the package to load\n#require(package) only loads package if not already loaded (recommended)\n\n#   http://cran.r-project.org/web/views/ \n#   #Rstats \n#   www.rseek.org\n#   http://www.r-bloggers.com/top-100-r-packages-for-2013-jan-may/\n\nvignette(all=FALSE)\nvignette(all=TRUE)\nvignette(\"googleVis\")\nvignette(\"RColorBrewer\")   \n\n#================Exercise 3\nbirthdays<-as.Date(c(\"2015/1/1\",\"2015/2/4\", \"2015/2/4\", \"2015/12/1\"))\n#check for dates where there is a duplicate\nduplicated(birthdays)\n#longest gap\nfor(n in 1:length(birthdays)){\nbirthdayDiff<-difftime(birthdays[1*n], birthdays[2*n])\n}\nmax(birthdayDiff)\n#much better:\nmax(diff(sort(birthdays)))\n\n#shortest gap:\nmin(diff(sort(birthdays)))\n\n#A function!!!\n#Estimate the probability of duplicated birthdays in a class of size N\nbirthday.prob <- function(N=36, niterations=10000) {\n  data <- 1:365\n  nduplicates <- 0\n  for (i in 1:niterations) {\n    if (any(duplicated(sample(x=data, size=N, replace=T)))){\n      nduplicates <- nduplicates+1\n    }\n  }\n  return(nduplicates/niterations)\n}\n\nbirthday.prob(N=36)\n\n\n",
    "created" : 1479868377871.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2133975086",
    "id" : "2990E129",
    "lastKnownWriteTime" : 1445548557,
    "path" : "~/Documents/Software/R/Intro_to_R/Class_work_Intro/6.DataManipulation.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}